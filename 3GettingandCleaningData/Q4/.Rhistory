head(htmlCode,10)
head(htmlCode,1)
head(htmlCode,10)
library(XML)
?htmlTreeParse
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
html
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr);
html2 = GET(url)
html2
content2 = content(html2, as = "text")
content2
parsedHtml = htmlParse(content2, asText = TRUE)
parsedHtml
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(parsedHtml, "//td[@id='col-citedby']", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd"))
pg2
pg2
names(pg2)
google = handle("http://google.com")
google
pg1 = GET(handle=google,path="/")
pg1
pg2 = GET(handle=google,path="search")
pg2
myapp = oauth_app("MyTestApp", key="3f90c4fe3dc41d867aa3",secret="aaf91db07359d13b4a2dc25aab46125721f23e37")
myapp
oauth_endpoints("github")
conq5 <- url("C:\Users\gomezaa\AppData\Local\Temp\getdata_wksst8110.for")
conq5 <- url("C:\\Users\\gomezaa\\AppData\\Local\\Temp\\getdata_wksst8110.for")
conq5 = url("C:\\Users\\gomezaa\\AppData\\Local\\Temp\\getdata_wksst8110.for")
conq5 <- url("C:\\Users\\gomezaa\\AppData\\Local\\Temp\\getdata_wksst8110.for")
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
read.fwf(conq5)
?read.fwf
ff <- tempfile()
ff
cat(file = ff, "123456", "987654", sep = "\n")
cat(file = ff, "123456", "987654", sep = "\n")
ff
read.fwf(ff, widths = c(1,2,3))
ff <- tempfile()
ff
cat(file = ff, "123456", "987654", sep = "\n")
ff
read.fwf(ff, widths = c(1))
read.fwf(ff, widths = c(2))
read.fwf(ff, widths = c(3))
read.fwf(ff, widths = c(4))
read.fwf(ff, widths = c(7))
read.fwf(ff, widths = c(6))
read.fwf(ff, widths = c(1,2,3))
read.fwf(ff, widths = c(1,2,3))
read.fwf(ff, widths = c(3,3))
read.fwf(ff, widths = c(3,5))
read.fwf(conq5, widths = widths)
widths <- c(9,9)
read.fwf(conq5, widths = widths)
head(read.fwf(conq5, widths = widths), 5)
head(read.fwf(conq5, widths = widths), 5)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,9)
rr <- read.fwf(conq5, widths = widths)
head(rr,5)
rr <- read.fwf(conq5, widths = widths)
head(rr,5:10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,9)
rr <- read.fwf(conq5, widths = widths)
head(rr,5:10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,9)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
# Read Fixed Width Format Files
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,10)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
class(rr)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, widths = widths, headers= 5)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, widths = widths, headers= TRUE)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, widths = widths, header= 4)
head(rr,10)
rr <- read.fwf(conq5, header= 4, widths = widths)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, header= 4, widths = widths)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, header= TRUE, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, skip=5, widths = widths)
head(rr,10)
sum(rr$V5)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, skip=4, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, skip=4, widths = widths)
head(rr,10)
sum(rr$V5)
swirl()
swirl()
swirl()
swril()
library(swirl)
swirl()
library(tidyr)
?maps
??maps
library(mapps)
library(maps)
installed.packages(maps)
installed.package(maps)
installed.packages("maps")
library(maps)
library("maps")
library(OpenStreetMap)
library(rgdal)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='apple-iphoto')
plot(map)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
plot(map)
map2 = openmap( c(lat= 5.7178,    lon= -90.2112),
c(lat= 12.7178,   lon= -80.2112),
minNumTiles=9,    type='bing')
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
library(OpenStreetMap)
library(rgdal)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
plot(map)
plot(map)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
# 1- install the packages
install.packages("OpenStreetMap")
install.packages("rgdal")
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
library(OpenStreetMap)
library(rgdal)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
plot(map)
library(OpenStreetMap)
library(rgdal)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
plot(map)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='osm')
library(OpenStreetMap)
library(rgdal)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
library(OpenStreetMap)
library(rgdal)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='osm')
plot(map)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='osm')
plot(map)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='osm')
plot(map)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='bing')
library(OpenStreetMap)
library(rgdal)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='osm')
library(OpenStreetMap)
library(rgdal)
map = openmap(c(lat= 38.05025395161289,   lon= -123.03314208984375),
c(lat= 36.36822190085111,   lon= -120.69580078125),
minNumTiles=9,type='osm')
install.packages("rgdal")
install.packages("OpenStreetMap")
install.packages("OpenStreetMap")
Sys.getenv('http_proxy')
getwd()
getwd("~")
getwd()
setwd("~\\GitHub\\DataScienceWithR\\3GettingandCleaningData\\Q4")
getwd()
urlData <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
urlCodeBook <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
if(!file.exists(file.path("data", "housingIdaho.csv")))
{
download.file(urlData, destfile = file.path("data", "housingIdaho.csv"))
download.file(urlCodeBook, destfile = file.path("housingIdaho.pdf"),mode = "w" )
}
filePath <- file.path("data", "housingIdaho.csv")
filePath <- file.path("data", "housingIdaho.csv")
myDf <- read.csv(filePath)
myDf
names(myDf)
names(myDf)
dfNames <- names(myDf)
strsplit(dfNames,"wgtp")
strsplit(dfNames,"wgtp")[115]
strsplit(dfNames,"wgtp")[123]
filePath <- file.path("data", "GrossDomesticProduct.csv")
urlData <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists(filePath))
if(!file.exists(filePath))
{
download.file(urlData, destfile = filePath)
}
myDf <- read.csv(filePath)
myDf
myDf
urlData <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
filePath <- file.path("data", "grossdomesticproduct.csv")
setwd("~\\GitHub\\DataScienceWithR\\3GettingandCleaningData\\Q4")
urlData <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
filePath <- file.path("data", "grossdomesticproduct.csv")
urlData <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
filePath <- file.path("data", "grossdomesticproduct.csv")
if(!file.exists(filePath))
{
download.file(urlData, destfile = filePath)
}
myDf <- read.csv(filePath)
myDf
myDf <- read.csv(filePath)
myDf <- read.csv(filePath)
myDf
getwd()
myDf <- read.csv(filePath, stringsAsFactors = FALSE)
myDf
myDf
names(myDf)
getwd()
filePath <- file.path("data", "grossdomesticproduct.csv")
myDf <- read.csv(filePath, stringsAsFactors = FALSE)
names(myDf)
myDf
table(myDf)
head(myDf, 5)
head(myDf, 15)
?read.csv
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=2)
names(myDf)
head(myDf, 15)
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=3)
names(myDf)
head(myDf, 15)
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=5)
names(myDf)
head(myDf, 15)
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=4)
names(myDf)
head(myDf, 15)
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=5, head=false)
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=5, head=FALSE)
names(myDf)
head(myDf, 15)
head(myDf, 15)
myDf
total <- myDf$V5
total
total[!is.na()]
total[!is.na]
total[is.na]
!is.na(total)
is.na(total)
total
total
gep("[19]",total, value=true)
grep("[19]",total, value=true)
grep("16",total, value=true)
grep("",total, value=true)
grep(" 16,244,600 ",total, value=true)
grep(" 16,244,600 ",myDf$V5, value=true)
grep("16,2",myDf$V5, value=true)
myDf$V5
grep("16,2",myDf$V5, value=true)
grep("16,2",myDf$V5, value=TRUE)
grep("[19]",myDf$V5, value=TRUE)
as.numeric(total)
grep("[19]",myDf$V5, value=TRUE)
as.numeric(str_trim(total))
library(stringr)
as.numeric(str_trim(total))
str_trim(total)
str_trim(total)
as.numeric(str_trim(total))
gsub(",","",total)
gsub(",","",total) >%>
myDf$V5 %>%
gsub(",","")
gsub(",","",total)
result <-
myDf$V5 %>%
gsub(",","")
gsub(",","",myDf$V5)
total <- gsub(",","",myDf$V5)
total <- str_trim(total)
total
total <- grep("[19]",total, value=TRUE)
total
as.numeric(total)
total <- as.numeric(total)
mean(total)
myDf
myDf
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=5, head=FALSE)
myDf
head(myDf,10)
myDf
total <- myDf$V5
head(myDf,10)
head(myDf,10)
head(myDf,20)
head(myDf,60)
head(myDf,80)
head(myDf,100)
head(myDf,120)
head(myDf,200)
$myDf$V2 != ""
myDf$V2 != ""
myDf2 <- myDf$V2 != ""
myDf2
myDf2
myDf[myDf$V2 != "",]
myDf2 <- myDf[myDf$V2 != "",]
head(myDf2,200)
head(myDf2,20)
head(myDf2,100)
head(myDf2,180)
head(myDf2,180)
head(myDf2,200)
head(myDf2,200)
as.numeric(myDf$V2)
myDf$V2 <- as.numeric(myDf$V2)
myDf
head(myDf2,180)as.numeric(myDf$V2)
as.numeric(myDf$V2)
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=5, head=FALSE)
myDf$V2 <- as.numeric(myDf$V2)
is.na(myDf$V2)
myDf2 <- myDf[!is.na(myDf$V2),]
myDf2
myDf$V2 <- as.numeric(myDf$V2)
myDf <- myDf[!is.na(myDf$V2),]
myDf
total <- gsub(",","",myDf$V5)
total <- str_trim(total)
total <- grep("[19]",total, value=TRUE)
total <- as.numeric(total)
total
mean(total)
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=5, head=FALSE)
myDf$V2 <- as.numeric(myDf$V2)
myDf <- myDf[!is.na(myDf$V2),]
myDf
total <- gsub(",","",myDf$V5)
myDf
myDf$V5 <- gsub(",", "", myDf$V5)
myDf
myDf$V5 <- str_trim(total)
myDf
myDf$V5 <- grep("[19]",total, value=TRUE)
myDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=5, head=FALSE)
myDf$V2 <- as.numeric(myDf$V2)
myDf <- myDf[!is.na(myDf$V2),]
myDf
myDf$V5 <- gsub(",", "", myDf$V5)
myDf
myDf$V5 <- str_trim(myDf$V5)
myDf
grep("[19]",myDf$V5, value=TRUE)
myDf$V5 <- as.numeric(myDf$V5)
myDf
mean(total)
mean(myDf$V5)
myDf
grep("^United",myDf$V4)
grep("^United",myDf$V4, value = TRUE)
grossDomesticProduct <- "data//grossdomesticproduct.csv"
educationalData <- "data//educationalData.csv"
gdpDf <- read.csv(grossDomesticProduct)
edDf <- read.csv(educationalData)
gdpDf
gdpDf$V2 <- as.numeric(gdpDf$V2)
gdpDf <- read.csv(filePath, stringsAsFactors = FALSE, skip=5, head=FALSE)
edDf <- read.csv(educationalData)
gdpDf$V2 <- as.numeric(gdpDf$V2)
gdpDf <- gdpDf[!is.na(gdpDf$V2),]
gdpDf
edDf <- read.csv(educationalData)
edDf
head(edDf,50)
head(edDf,3)
head(edDf,1)
head(edDf,2)
names(edDf)
names(edDf)
edDf <- edDf[,c(1,2,10)]
edDf <- read.csv(educationalData)
edDf2 <- edDf[,c(1,2,10)]
edDf2
head(edDf2,10)
grep("Fiscal year",edDf2$SpecialNotes)
edDf2$SpecialNotes
edDf2$Special.Notes
grep("Fiscal year",edDf2$Special.Notes)
grep("Fiscal year",edDf2$Special.Notes,value = TRUE)
grep("[Ff]iscal year",edDf2$Special.Notes,value = TRUE)
lenght(grep("[Ff]iscal year",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal year",edDf2$Special.Notes,value = TRUE))
length(grep("Fiscal year",edDf2$Special.Notes,value = TRUE))
length(grep("Fiscal year",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal year",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscalyear",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal  year",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscalYear",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal  Year",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal Year",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal [Yy]ear",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal [Yy]ear",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal year",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal [Yy]ear",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal [Yy]ear(.*)[Jj]une",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal [Yy]ear(.*)june",edDf2$Special.Notes,value = TRUE))
length(grep("[Ff]iscal [Yy]ear(.*)June",edDf2$Special.Notes,value = TRUE))
grep("[Ff]iscal [Yy]ear(.*)[Jj]une",edDf2$Special.Notes,value = TRUE)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN", auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
sampleTimes
install.packages("lubridate")
library(lubridate)
sampleTimes
sampleTimes <- ymd(sampleTimes)
sampleTimes
year(sampleTimes) == 2012
year(sampleTimes) == 2012
sampleTimes2 <- sampleTimes(year(sampleTimes) == 2012)
sampleTimes2 <- sampleTimes[year(sampleTimes) == 2012]
sampleTimes2
day(sampleTimes2)
sampleTimes2[1]
sampleTimes2[day(sampleTimes2[1])
sampleTimes2[day(sampleTimes2[1])]
sampleTimes2[day(sampleTimes2[1])]
day(sampleTimes2[1])
sampleTimes2[1]
weekdays(sampleTimes2[1])
sampleTimes2[1]
sampleTimes2[weekdays(sampleTimes2)] == "lunes"]
sampleTimes2[weekdays(sampleTimes2) == "lunes"]
lenght(sampleTimes2[weekdays(sampleTimes2) == "lunes"])
length(sampleTimes2[weekdays(sampleTimes2) == "lunes"])
length(sampleTimes2)
