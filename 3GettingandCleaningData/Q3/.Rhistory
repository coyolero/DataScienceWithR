-(5:20)
select(cran,-(1:11))
select(cran,1:11)
select(cran,-(x:size))
select(cran,-(1:11))
select(cran,-(1:1))
select(cran,-(1:1))
select(cran,-(1:10))
select(cran,-(1:11))
select(cran, -(X:size))
filter(cran, package == "swril")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "CR")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 && r_os == "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(crane, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20), size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size/1000)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
swrirl()
swirl()
libray(swirl)
library(swirl)
ls()
rm(list=ls())
library(swirl)
swirl()
library(dplyr)
mydf()
mydf
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by # Group a tbl by one or more variables.
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
data("hflights", package = "hflights")
carriers <- group_by(hflights, UniqueCarrier)
summarise(carriers, n())
?n_distinct
x <- sample(1:10, 1e5, rep = TRUE)
x
length(unique(x))
n_distinct(x)
?n
summarise(carriers, n())
mutate(carriers, n = n())
filter(carriers, n() == 79)
select(mutate(carriers, n = n()), ArrDelay:n)
by_package
submit
submit()
pack_sum
class(pack_sum)
quantile(pack_sum$count, probs = 0.99)
select(pack_sum, count > 679)
top_counts <- select(pack_sum, count > 679)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count)
arrange(top_counts, desc(count))
arrange(top_counts, des(count))
?arrange
top_counts
head(top_counts,10)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
pack_sum
arrage(pack_sum, package)
arrange(pack_sum, package)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
submit
submit()
submit
submit()
submit
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
print
submit
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(dec(size_mb))
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(dec(size_mb)) %>%
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(dec(size_mb)) %>%
print
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb)) %>%
print
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb)) %>%
print
submit()
install.packages(“RMySQL”, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user" password = "password", dbname="db")
library(RMySQL)
library("RMySQL")
install.packages("RMySQL", type = "source")
library("RMySQL")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",password = "password", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",password = "", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306)
con <- dbConnect(MySQL(), host="127.0.0.1")
con <- dbConnect(MySQL())
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",password = "MiBasecita", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",password = "MiBasecita", dbname="db")
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",password = "MiBasecita", dbname="db")
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
con <- dbConnect(MySQL(), host="127.0.0.1")
con <- dbConnect(MySQL(), host="127.0.0.1", password="MiBasecita")
con <- dbConnect(MySQL(), host="127.0.0.1", password="MiBasecita", user="root")
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu");
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu");
result <- dbGetQuery(ucscDb,"show databases;");
dbDisconnect(ucscDb);
result
class(result)
head(result,10)
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
head(allTables, 20)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
query
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);
affyMis
quantile(affyMis$misMatches);
# Get dimensions of a specific table --> affyU133Plus2
dbListFields(hg19,"affyU133Plus2")
quantile(affyMis$misMatches);
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
affyMisSmall
affyMisSmall <- fetch(query,n=1); dbClearResult(query);
affyMisSmall
affyMisSmall <- fetch(query,n=1); dbClearResult(query);
affyMisSmall
affyMisSmall <- fetch(query,n=1);
affyMisSmall
dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createFile("example.h5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
h5ls("example.h5")
B = array( seq(0.1,2.0, by = 0.1), dim = c(5,2,2))
b
B
attr(B, "scale") <- "liter"
B
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
df
library(rhdf5)
created = h5createFile("example.h5")
created
## Write a data set
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readA
readA = h5read("example.h5","foo/A")
readA
readB = h5read("example.h5","foo/foobaa/B")
readB
readdf= h5read("example.h5","df")
readdf
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[10]
htmlCode[nchar(10)]
nchar(htmlCode[10])
htmlCode(10, 20, 30,100)
htmlCode[10, 20, 30,100]
htmlCode[C(10, 20, 30,100),]
nchar(htmlCode[10,])
htmlCode[C(10, 20, 30,100)]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
library(reshape2)
head(mtcars)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
head(htmlCode,10)
head(htmlCode,1)
head(htmlCode,10)
library(XML)
?htmlTreeParse
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
html
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr);
html2 = GET(url)
html2
content2 = content(html2, as = "text")
content2
parsedHtml = htmlParse(content2, asText = TRUE)
parsedHtml
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(parsedHtml, "//td[@id='col-citedby']", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd"))
pg2
pg2
names(pg2)
google = handle("http://google.com")
google
pg1 = GET(handle=google,path="/")
pg1
pg2 = GET(handle=google,path="search")
pg2
myapp = oauth_app("MyTestApp", key="3f90c4fe3dc41d867aa3",secret="aaf91db07359d13b4a2dc25aab46125721f23e37")
myapp
oauth_endpoints("github")
conq5 <- url("C:\Users\gomezaa\AppData\Local\Temp\getdata_wksst8110.for")
conq5 <- url("C:\\Users\\gomezaa\\AppData\\Local\\Temp\\getdata_wksst8110.for")
conq5 = url("C:\\Users\\gomezaa\\AppData\\Local\\Temp\\getdata_wksst8110.for")
conq5 <- url("C:\\Users\\gomezaa\\AppData\\Local\\Temp\\getdata_wksst8110.for")
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
read.fwf(conq5)
?read.fwf
ff <- tempfile()
ff
cat(file = ff, "123456", "987654", sep = "\n")
cat(file = ff, "123456", "987654", sep = "\n")
ff
read.fwf(ff, widths = c(1,2,3))
ff <- tempfile()
ff
cat(file = ff, "123456", "987654", sep = "\n")
ff
read.fwf(ff, widths = c(1))
read.fwf(ff, widths = c(2))
read.fwf(ff, widths = c(3))
read.fwf(ff, widths = c(4))
read.fwf(ff, widths = c(7))
read.fwf(ff, widths = c(6))
read.fwf(ff, widths = c(1,2,3))
read.fwf(ff, widths = c(1,2,3))
read.fwf(ff, widths = c(3,3))
read.fwf(ff, widths = c(3,5))
read.fwf(conq5, widths = widths)
widths <- c(9,9)
read.fwf(conq5, widths = widths)
head(read.fwf(conq5, widths = widths), 5)
head(read.fwf(conq5, widths = widths), 5)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,9)
rr <- read.fwf(conq5, widths = widths)
head(rr,5)
rr <- read.fwf(conq5, widths = widths)
head(rr,5:10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,9)
rr <- read.fwf(conq5, widths = widths)
head(rr,5:10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,9)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
# Read Fixed Width Format Files
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,10)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, widths = widths)
head(rr,10)
class(rr)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, widths = widths, headers= 5)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, widths = widths, headers= TRUE)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, widths = widths, header= 4)
head(rr,10)
rr <- read.fwf(conq5, header= 4, widths = widths)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, header= 4, widths = widths)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, header= TRUE, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, skip=5, widths = widths)
head(rr,10)
sum(rr$V5)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, skip=4, widths = widths)
head(rr,10)
conq5 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
widths <- c(9,10,1,3,9)
rr <- read.fwf(conq5, skip=4, widths = widths)
head(rr,10)
sum(rr$V5)
swirl()
swirl()
swirl()
swril()
library(swirl)
swirl()
library(tidyr)
?maps
??maps
library(mapps)
library(maps)
installed.packages(maps)
installed.package(maps)
installed.packages("maps")
library(maps)
library("maps")
setwd("~\\GitHub\\DataScienceWithR\\3GettingandCleaningData\\Q3")
head(myDf[which(agricultureLogical),],3)
filePath <- file.path("data", "housingIdaho.csv")
myDf <- read.csv(filePath, stringsAsFactors = FALSE)
agricultureLogical <- myDf$ACR >= 3 & myDf$AGS >= 6
head(myDf[which(agricultureLogical),],3)
head(myDf[which(agricultureLogical)],3)
myDF2 <- data.frame(th = 1:5)
myDF2
myDF2 <- data.frame(th = 10:15)
myDF2
tt <- myDF2$th > 14
tt
myDF2[tt]
myDF2[tt,]
tt <- myDF2$th > 11 & myDF2$th < 15
myDF2[tt,]
head(myDf[which(agricultureLogical)],3)
agricultureLogical <- myDf$ACR >= 3 & myDf$AGS >= 6
head(myDf[which(agricultureLogical)],3)
myDf <- read.csv(filePath, stringsAsFactors = FALSE)
agricultureLogical <- myDf$ACR >= 3 & myDf$AGS >= 6
head(myDf[which(agricultureLogical)],3)
head(myDf[which(agricultureLogical),],3)
picturePath <- file.path("data", "picture.jpg")
if(!file.exists(picturePath))
{
download.file(urlData, destfile = picturePath)
}
picturePath <- file.path("data", "picture.jpg")
picturePath
if(!file.exists(picturePath))
{
download.file(urlData, destfile = picturePath)
}
pictureUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
if(!file.exists(picturePath))
{
download.file(urlData, destfile = picturePath)
}
if(!file.exists(picturePath))
{
download.file(pictureUrl, destfile = picturePath)
}
download.file(pictureUrl, destfile = picturePath, mode = "wb")
library(jpeg)
install.packages("jpeg")
library(jpeg)
??jpeg
?jpeg
jpeg(picturePath, native = TRUE)
jpeg(filename = picturePath, native = TRUE)
jpeg(filename = picturePath)
plot(jpeg(filename = picturePath))
img -> jpeg(filename = picturePath)
img -> jpeg(filename = picturePath)
myImg -> jpeg(filename = picturePath)
myImg <- jpeg(filename = picturePath)
myImg
myImg <- jpeg(file = picturePath)
myImg
download.file(pictureUrl, destfile = picturePath, mode = "wb")
myImg <- jpeg(filename = picturePath)
myImg
myImg
download.file(pictureUrl, destfile = picturePath, mode = "wb")
?jpeg
??jpeg
myImg <- readJPEG(filename = picturePathm native = TRUE)
myImg <- readJPEG(filename = picturePathm, native = TRUE)
myImg <- readJPEG(picturePathm, native = TRUE)
myImg <- readJPEG(picturePath, native = TRUE)
myImg
qua(myImg)
quantile(myImg)
quantile(myImg, c(0.3,0.8))
norm(-15259150)
norm(myImg)
norm(myImg, 0.3)
norm(myImg, -15259150)
?norm
quantile(myImg, c(0.3,0.8))
